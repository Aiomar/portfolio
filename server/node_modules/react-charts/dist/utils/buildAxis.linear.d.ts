import { translateX } from './Utils';
export default function buildAxisLinear({ axis: { primary, type, invert, position, primaryAxisId, min: userMin, max: userMax, hardMin, hardMax, base, tickCount, minTickCount, maxTickCount, tickValues, format: userFormat, tickSizeInner, tickSizeOuter, tickPadding, labelRotation, innerPadding, outerPadding, showGrid, showTicks, filterTicks, show, stacked, id: userId, estimatedTickSize: userEstimatedTickSize, }, materializedData, gridHeight, gridWidth, }: {
    axis: {
        primary: any;
        type: any;
        invert: any;
        position: any;
        primaryAxisId: any;
        min?: undefined;
        max?: undefined;
        hardMin?: undefined;
        hardMax?: undefined;
        base?: undefined;
        tickCount?: number | undefined;
        minTickCount?: number | undefined;
        maxTickCount?: number | undefined;
        tickValues?: null | undefined;
        format?: null | undefined;
        tickSizeInner?: number | undefined;
        tickSizeOuter?: number | undefined;
        tickPadding?: number | undefined;
        labelRotation?: number | undefined;
        innerPadding?: number | undefined;
        outerPadding?: number | undefined;
        showGrid?: null | undefined;
        showTicks?: boolean | undefined;
        filterTicks?: ((d: any) => any) | undefined;
        show?: boolean | undefined;
        stacked?: boolean | undefined;
        id: any;
        estimatedTickSize: any;
    };
    materializedData: any;
    gridHeight: any;
    gridWidth: any;
}): {
    id: any;
    primary: any;
    type: any;
    invert: any;
    position: any;
    primaryAxisId: any;
    hardMin: undefined;
    hardMax: undefined;
    base: undefined;
    isTimeType: boolean;
    tickCount: number;
    minTickCount: number;
    maxTickCount: number;
    tickValues: null;
    tickSizeInner: number;
    tickSizeOuter: number;
    tickPadding: number;
    labelRotation: number;
    innerPadding: number;
    outerPadding: number;
    showGrid: null;
    showTicks: boolean;
    show: boolean;
    stacked: boolean;
    scale: any;
    uniqueVals: never[];
    vertical: boolean;
    RTL: boolean;
    barSize: number;
    cursorSize: number;
    stepSize: number;
    seriesBandScale: (d: any) => any;
    seriesBarSize: number;
    domain: any;
    range: any[];
    max: any;
    directionMultiplier: number;
    transform: typeof translateX;
    ticks: any;
    format: any;
    spacing: number;
    estimatedTickSize: number;
};
